**Q. T**ake a backup of the etcd cluster and save it to `/opt/etcd-backup.db`. ****

https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster

```bash
#ETCDCTL_API=3 etcdctl --endpoints $ENDPOINT snapshot save snapshot.db
#ETCDCTL_API=3 etcdctl snapshot save -h

#yaml 파일 확인
#cat /etc/kubernetes/manifests/etcd.yaml | grep file  
#vi /etc/kubernetes/manifests/etcd.yaml
ETCDCTL_API=3 etcdctl --endpoints 127.0.0.1:2379 snapshot save /opt/etcd-backup.db --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key
```

**Q.** Create a Pod called `redis-storage` with image: `redis:alpine` with a Volume of type `emptyDir` that lasts for the life of the Pod.

https://kubernetes.io/docs/concepts/storage/volumes/

```bash
kubectl run redis-storage --image=redis:alpine --dry-run=client -o yaml 
kubectl run redis-storage --image=redis:alpine --dry-run=client -o yaml > redis-storage.yaml

#redis-storage.yaml 파일 수정 후 실행
kubectl create -f redis-storage.yaml 
```

redis-storage.yaml

```bash
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: redis-storage
  name: redis-storage
spec:
  containers:
  - image: redis:alpine
    name: redis-storage
    resources: {}
    volumeMounts:
    - mountPath: /data/redis
      name: cache-volume
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  volumes:
  - name: cache-volume
    emptyDir:
      sizeLimit: 500Mi
status: {}
```

**Q.**Create a new pod called `super-user-pod` with image `busybox:1.28`. Allow the pod to be able to set `system_time`.

https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

```bash
kubectl run super-user-pod --image=busybox:1.28 --dry-run=client -o yaml 
kubectl run super-user-pod --image=busybox:1.28 --dry-run=client -o yaml > super-user-pod.yaml

vi super-user-pod.yaml

#kubectl delete pod [pod 이름]
kubectl create -f super-user-pod.yaml 
```

super-user-pod.yaml 

```bash
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: super-user-pod
  name: super-user-pod
spec:
  containers:
  - image: busybox:1.28
    name: super-user-pod
    command: ["sleep","4800"]
    securityContext:
      capabilities:
        add: [ "SYS_TIME"]
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
               
```

**Q.** A pod definition file is created at `/root/CKA/use-pv.yaml`. Make use of this manifest file and mount the persistent volume called `pv-1`. Ensure the pod is running and the PV is bound.

mountPath: `/data`

persistentVolumeClaim Name: `my-pvc`

persistentVolume Claim configured correctly

pod using the correct mountPath

pod using the persistent volume claim?

pvc를 만들고 pod definition에 mount해야한다. 

```bash
#cat /root/CKA/use-pv.yaml
vi pvc.yaml
kubectl create -f pvc.yaml

vi /root/CKA/use-pv.yaml
kubectl create /root/CKA/use-pv.yaml
kubectl describe pod use-pv
```

pvc.yaml

```bash
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Mi
               
```

`use-pv.yaml`

```bash
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: use-pv
  name: use-pv
spec:
  containers:
  - image: nginx
    name: use-pv
    volumeMounts:
      - mountPath: "/data"
        name: mypd
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  volumes:
    - name: mypd
      persistentVolumeClaim:
        claimName: my-pvc
status: {}
```